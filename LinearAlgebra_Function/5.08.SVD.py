# Singular Value Decomposition
# SVD

import numpy as np
'''np.linalg.svd'''

A = [[i**2, i, 1] for i in range(1930, 2020, 10)]
matA = np.array(A).astype(np.float64)
print(matA)
# [[3.7249e+06 1.9300e+03 1.0000e+00]
#  [3.7636e+06 1.9400e+03 1.0000e+00]
#  [3.8025e+06 1.9500e+03 1.0000e+00]
#  [3.8416e+06 1.9600e+03 1.0000e+00]
#  [3.8809e+06 1.9700e+03 1.0000e+00]
#  [3.9204e+06 1.9800e+03 1.0000e+00]
#  [3.9601e+06 1.9900e+03 1.0000e+00]
#  [4.0000e+06 2.0000e+03 1.0000e+00]
#  [4.0401e+06 2.0100e+03 1.0000e+00]]

U, s, V = np.linalg.svd(matA, full_matrices = True)

# s : egienvalue 리스트, 대각행렬
print(s)    # [1.16487003e+07 7.74116298e+01 4.52260394e-04]
S = np.zeros(matA.shape)
for i in range(len(s)):
    S[i][i] = s[i]
print(S)
# [[1.16487003e+07 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 7.74116298e+01 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 4.52260394e-04]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]
#  [0.00000000e+00 0.00000000e+00 0.00000000e+00]]

# A = U * S * V
appA = np.dot(U, np.dot(S, V))
print(appA)
# [[3.7249e+06 1.9300e+03 1.0000e+00]
#  [3.7636e+06 1.9400e+03 1.0000e+00]
#  [3.8025e+06 1.9500e+03 1.0000e+00]
#  [3.8416e+06 1.9600e+03 1.0000e+00]
#  [3.8809e+06 1.9700e+03 1.0000e+00]
#  [3.9204e+06 1.9800e+03 1.0000e+00]
#  [3.9601e+06 1.9900e+03 1.0000e+00]
#  [4.0000e+06 2.0000e+03 1.0000e+00]
#  [4.0401e+06 2.0100e+03 1.0000e+00]]
# matA와 동일한 결과가 나온다.

# 특징

# V * V.T = I
print(V@V.T)
# [[ 1.00000000e+00  1.24915713e-19 -1.18164281e-22]
#  [ 1.24915713e-19  1.00000000e+00 -1.20663617e-19]
#  [-1.18164281e-22 -1.20663617e-19  1.00000000e+00]]

